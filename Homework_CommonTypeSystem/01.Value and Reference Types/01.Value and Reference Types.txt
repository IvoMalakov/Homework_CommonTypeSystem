Value and Reference Types


1. Witch .NET data types are value types?: 

	Value types in .NET are 3 main subtypes: 

Primitive value type - Primitive types permit values to be created by writing literals. Those types are: 

		a) Intgral value types - Byte, Short, Integer and Long. These types map to 	System.Byte, System.Int16, System.Int32, and System.Int64, respectively. 			The default value of an integral type is equivalent to the literal 0.

		b) Floating point value types - Float and Double. Float is 4 byte floating point, Double is 8 byte floating point. The default value of a floating-point type is equivalent to the literal 0. 

		c) The Decimal type - Decimal is 16-byte decimal value, which maps to System.Decimal. The default value of decimal is equivalent to the literal 0D.

		d) The Boolean value type - Boolen represents a truth value, typically the result of a relational or logical operation. The literal is of type System.Boolean. The default value of the Boolean type is equivalent to the literal False.

		e) The Date value type - Date  represents a date and/or a time and maps to System.DateTime. The default value of the Date type is equivalent to the literal # 01/01/0001 12:00:00AM #

		f) The Char value type - Char represents a single Unicode character and maps to System.Char. The default value of the Char type is equivalent to the constant expression  '\u0000'

Structures: 
A Struct is a complex data type declaration that defines a physically grouped list of variables to be placed under one name in a block of memory, allowing the different variables to be accessed via a single pointer, or the struct declared name which returns the same address. The struct can contain many other complex and simple data types in an association, so is a natural organizing type for records like the mixed data types in lists of directory entries reading a hard drive (file length, name, extension, physical (cylinder, disk, head indexes) address, etc.), or other mixed record type (patient names, address, telephone... insurance codes, balance, etc.).The C# struct directly corresponds to the Assembly Language data type of the same use, and both reference a contiguous block of physical memory, usually delimited (sized) by word-length boundaries. Language implementations which could utilize half-word or byte boundaries (giving denser packing, using less memory) were considered advanced in the mid-eighties. Being a block of contiguous memory, each variable within is located a fixed offset from the index zero reference, the pointer. As an illustration, many BASIC interpreters once fielded a string data struct organization with one value recording string length, one indexing (cursor value of) the previous line, one pointing the string data.

Enumerable types - Abstract data types using the Interface : IEnumerable.

2. Witch .NET data types are referece types?:  - All other types in .NET are referece types. 	Referece types of data are: Interfaces, Classes, Arrays, Pointers, Dynamic, Delegates and many others.

3. How do value and reference types differ when assingnet to a variable?:

	A Value Type holds the data within its own memory allocation. 
	A Reference Type contains a pointer to another memory location that holds the real data.
	Reference Type variables are stored in the Heap while Value Type variables are stored in the Stack.

4. How do value and reference types behave when passed as argument to a method?:

	 By default, parameters are value parameters. This means that a new storage location is 	created for the variable in the function member declaration, and it starts off with the value 	that you specify in the function member invocation. If you change that value, that doesn't 	alter any variables involved in the invocation..

	Reference parameters don't pass the values of the variables used in the function member 	invocation - they use the variables themselves. Rather than creating a new storage 	location for the variable in the function member declaration, the same storage location is 	used, so the value of the variable in the function member and the value of the reference 	parameter will always be the same. Reference parameters need the ref modifier as part 	of both the declaration and the invocation - that means it's always clear when you're 	passing something by reference.

5. Where in memory are value types allocated? Where are reference types allocated?:

	Value types are allocated in Stack memory. Referece types are allocated in Heap 	memory. In the Stack memory Reference types holds only a pointer to the relevant 	address in the Heap memory.

6. What is data mutation? Can value types be mutated? Can reference types be mutated?:

	Data mutation is when we change one or several parameters for a referece type data. For example: If we have a class Student who holds following parameters: Name and Age and we have an object from class Student - the Student with Name: "Pesho" and Age: 42 and if we change the Age of this student for example to 24 this is a mutation. The mutation can make a lot of probles because if I have another object from class Student - for example gosho and I say: gosho = pesho. If I change the Age of  pesho, that will change the Age of gosho too. 
	Only the Reference type of data can be mutated. The Value types of data can not be mutated because they hold the data directly. For example if I have a variable of type int ? = 5 and I make a new variable int b = a a will have an adress in the Stack memory and b will have another adress in the Stack memory. And if I change b, for example if I say: b = 7 that will not change the value of the variable a, only to variable b.

7. What is the diffrence between mutating and setting (assigning) a variable? Give examples.

	Muttating is when we cahnge some of the parameters for a Reference type of data. For example: If we have a class Student who holds following parameters: Name and Age and we have an object from class Student - the Student with Name: "Pesho" and Age: 42 and if we change the Age of this student for example to 24 this is a mutation.
	The diffrence between mutation and setting is the following:
		If we have another object from class Student - for example gosho and I say: gosho = pesho. If I change the Age of  pesho, that will change the Age of gosho too. The reason is that: his pointers in the Stack memory link to the same adress in the Heap memory. 
	If we want to avoide such problems we need to use setting not mutation. Setting means we make a new Student - a new object from class Student - for exampe gosho and set the same values to his parameters like pesho. In this case if we change the Age of pesho that will not affect to the Age of gosho like that happends if we use mutation. The reason is that: when we make a new Student gosho in the Heap memory allocates a new chunk of memory it holds the data for gosho and his pointer in the Stack memory link to this new adress in the Heap memory, pesho's pointer link to the old adress in the Heap memory. In this case if we change the parameters of gosho this will not affect to parameters of pesho. 


8. What are the out and ref keywords used for? In what do they diffrer?:

	The key words out and ref are used when we want to pass a parameter not directy, but 	by his adress in the Stack memory. Those keywords can be used for both data types - 	value types and reference types.  The main diffrences between them are: 
ref requires that the variable be initialized before it is passed, out do not requered this.
out obliges us to change the value of our parameter inside the body of our function or method. ref do not obliges us to do that. 
